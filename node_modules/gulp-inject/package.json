{
  "name": "gulp-inject",
  "version": "1.0.2",
  "description": "A javascript, stylesheet and webcomponent injection plugin for Gulp, i.e. inject file references into your index.html",
  "keywords": [
    "gulpplugin",
    "inject",
    "stylesheets",
    "webcomponents",
    "scripts",
    "index"
  ],
  "homepage": "https://github.com/klei/gulp-inject",
  "bugs": {
    "url": "https://github.com/klei/gulp-inject/issues"
  },
  "author": {
    "name": "Joakim Bengtson",
    "email": "joakim@klei.se",
    "url": "http://joakim.beng.se"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/klei/gulp-inject.git"
  },
  "scripts": {
    "test": "mocha -R spec src/**/*_test.js"
  },
  "dependencies": {
    "gulp-util": "^3.0.0",
    "event-stream": "^3.1.0"
  },
  "devDependencies": {
    "mocha": "^1.20.1",
    "should": "^4.0.4"
  },
  "engines": {
    "node": ">=0.10.0",
    "npm": ">=1.2.10"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "readme": "# gulp-inject [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url]\n\n> A stylesheet, javascript and webcomponent reference injection plugin for [gulp](https://github.com/wearefractal/gulp). No more manual editing of your index.html!\n\n`gulp-inject` takes a stream of source files, transforms each file to a string and injects each transformed string into placeholders in the target stream files. See [Basic usage](#basic-usage) and [More examples](#more-examples) below.\n\nDefault [transforms](#optionstransform) and [placeholders](#optionsstarttag) exists for injecting files into `html`, `jade` and `jsx` files.\n\n## Installation\n\nInstall `gulp-inject` as a development dependency:\n\n```shell\nnpm install --save-dev gulp-inject\n```\n\n## Basic usage\n\n**The target file `src/index.html`:**\n\nEach pair of comments are the injection placeholders (aka. tags, see [`options.starttag`](#optionsstarttag) and [`options.endtag`](#optionsendtag)).\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My index</title>\n  <!-- inject:css -->\n  <!-- endinject -->\n</head>\n<body>\n\n  <!-- inject:js -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\n**The `gulpfile.js`:**\n\n```javascript\nvar gulp = require('gulp');\nvar inject = require(\"gulp-inject\");\n\ngulp.task('index', function () {\n  var target = gulp.src('./src/index.html');\n  // It's not necessary to read the files (will speed up things), we're only after their paths:\n  var sources = gulp.src(['./src/**/*.js', './src/**/*.css'], {read: false});\n\n  return target.pipe(inject(sources))\n    .pipe(gulp.dest('./src'));\n});\n```\n\n**`src/index.html` after running `gulp index`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My index</title>\n  <!-- inject:css -->\n  <link rel=\"stylesheet\" href=\"/src/style1.css\">\n  <link rel=\"stylesheet\" href=\"/src/style2.css\">\n  <!-- endinject -->\n</head>\n<body>\n\n  <!-- inject:js -->\n  <script src=\"/src/lib1.js\"></script>\n  <script src=\"/src/lib2.js\"></script>\n  <!-- endinject -->\n</body>\n</html>\n```\n\n## More examples\n\n### Injecting files relative to target files\n\nBy default the injected file paths are relative to each source file's `cwd` (see [`options.ignorePath`](#optionsignorepath)). If `options.relative` is set to `true` each injected path will be relative to each target file's directory instead.\n\n**Project structure:**\n\n```\n└── src\n    ├── module\n    │   ├── module.js\n    │   └── module.html\n    └── app\n        ├── main.js\n        └── index.html\n```\n\n**`src/app/index.html`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Index</title>\n</head>\n<body>\n  <h1>Home</h1>\n  <!-- inject:js -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\n**`src/module/module.html`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Module</title>\n</head>\n<body>\n  <h1>Module</h1>\n  <!-- inject:js -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\n**`gulpfile.js`:**\n\n```javascript\nvar inject = require('gulp-inject');\n\ngulp.src('./src/**/*.html')\n  .pipe(inject(gulp.src('./src/**/*.js', {read: false}), {relative: true}))\n  .pipe('./src');\n```\n\n**Resulting `src/app/index.html`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My Index</title>\n</head>\n<body>\n  <h1>Home</h1>\n  <!-- inject:js -->\n  <script src=\"main.js\"></script>\n  <script src=\"../module/module.js\"></script>\n  <!-- endinject -->\n</body>\n</html>\n```\n\n**Resulting `src/module/module.html`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Module</title>\n</head>\n<body>\n  <h1>Home</h1>\n  <!-- inject:js -->\n  <script src=\"../app/main.js\"></script>\n  <script src=\"module.js\"></script>\n  <!-- endinject -->\n</body>\n</html>\n```\n\n### Injecting files from multiple source streams\n\nThis example demonstrates how to inject files from multiple different streams into the same injection placeholder.\n\nInstall [`event-stream`](https://www.npmjs.org/package/event-stream) with: `npm install --save-dev event-stream` and use its [`merge`](https://github.com/dominictarr/event-stream#merge-stream1streamn) function.\n\n**Code:**\n\n```javascript\nvar es = require('event-stream'),\n    inject = require('gulp-inject');\n\n// Concatenate vendor scripts\nvar vendorStream = gulp.src(['./src/vendors/*.js'])\n  .pipe(concat('vendors.js'))\n  .pipe(gulp.dest('./dist'));\n\n// Concatenate AND minify app sources\nvar appStream = gulp.src(['./src/app/*.js'])\n  .pipe(concat('app.js'))\n  .pipe(uglify())\n  .pipe(gulp.dest('./dist'));\n\ngulp.src('./src/index.html')\n  .pipe(inject(es.merge(vendorStream, appStream)))\n  .pipe(gulp.dest('./dist'));\n```\n\n### Injecting some files into `<head>` and some into `<body>`\n\n#### Method 1: Use `gulp-inject`'s `starttag` option.\n\n**`gulpfile.js`:**\n\n```javascript\nvar inject = require('gulp-inject');\n\ngulp.src('./src/index.html')\n  .pipe(inject(gulp.src('./src/importantFile.js', {read: false}), {starttag: '<!-- inject:head:{{ext}} -->'}))\n  .pipe(inject(gulp.src(['./src/*.js', '!./src/importantFile.js'], {read: false})))\n  .pipe(gulp.dest('./dist'));\n```\n\n**And in your `./src/index.html`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My index</title>\n  <!-- inject:head:js -->\n  <!-- only importantFile.js will be injected here -->\n  <!-- endinject -->\n</head>\n<body>\n\n  <!-- inject:js -->\n  <!-- the rest of the *.js files will be injected here -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\n#### Method 2: Use `gulp-inject`'s `name` option.\n\n**`gulpfile.js`:**\n\n```javascript\nvar inject = require('gulp-inject');\n\ngulp.src('./src/index.html')\n  .pipe(inject(gulp.src('./src/importantFile.js', {read: false}), {name: 'head'}))\n  .pipe(inject(gulp.src(['./src/*.js', '!./src/importantFile.js'], {read: false})))\n  .pipe(gulp.dest('./dist'));\n```\n\n**And in your `./src/index.html`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My index</title>\n  <!-- head:js -->\n  <!-- only importantFile.js will be injected here -->\n  <!-- endinject -->\n</head>\n<body>\n\n  <!-- inject:js -->\n  <!-- the rest of the *.js files will be injected here -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\n\n### Injecting all files for development\n\nIf you use [Bower](http://bower.io/) for frontend dependencies I recommend using [`main-bower-files`](https://www.npmjs.org/package/main-bower-files) and injecting them as well.\n\n**`gulpfile.js`:**\n\n```javascript\nvar bowerFiles = require('main-bower-files'),\n    inject = require('gulp-inject'),\n    stylus = require('gulp-stylus'),\n    es = require('event-stream');\n\nvar cssFiles = gulp.src('./src/**/*.styl')\n  .pipe(stylus())\n  .pipe(gulp.dest('./build'));\n\ngulp.src('./src/index.html')\n  .pipe(inject(gulp.src(bowerFiles(), {read: false}), {name: 'bower'}))\n  .pipe(inject(es.merge(\n    cssFiles,\n    gulp.src('./src/app/**/*.js', {read: false})\n  )))\n  .pipe(gulp.dest('./build'));\n```\n\n**`src/index.html`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My index</title>\n  <!-- bower:css -->\n  <!-- bower installed css files will go here... -->\n  <!-- endinject -->\n  <!-- inject:css -->\n  <!-- built css files will go here... -->\n  <!-- endinject -->\n</head>\n<body>\n\n  <!-- bower:js -->\n  <!-- bower installed scripts will go here... -->\n  <!-- endinject -->\n  <!-- inject:js -->\n  <!-- app scripts will go here... -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\n**Note** remember to mount `./bower_components`, `./build` and `./src/app` as static resources in your server to make this work.\n\n### Injecting AngularJS scripts for development\n\nIf you're writing an AngularJS application and follow [Google's Angular APP Structure Recommendations](https://docs.google.com/document/d/1XXMvReO8-Awi1EZXAXS4PzDzdNvV6pGcuaF4Q9821Es/pub), which I think you should, it's important that the script files are injected in the correct order to avoid module instantiation problems like `Uncaught Error: [$injector:modulerr]`.\n\nTo do this you can use [`gulp-angular-filesort`](https://www.npmjs.org/package/gulp-angular-filesort) together with `gulp-inject` like so:\n\n```javascript\nvar angularFilesort = require('gulp-angular-filesort'),\n    inject = require('gulp-inject');\n\ngulp.src('./src/index.html')\n  .pipe(inject(\n    gulp.src('./src/app/**/*.js') // gulp-angular-filesort depends on file contents, so don't use {read: false} here\n      .pipe(angularFilesort())\n    }\n  )))\n  .pipe(gulp.dest('./build'));\n```\n\n### Injecting into a json-file\n\nYou can customize `gulp-inject` further by using the `transform` function option, e.g. by injecting files into a json-file.\n\n**Code:**\n\n```javascript\ngulp.src('./files.json')\n  .pipe(inject(gulp.src(['./src/*.js', './src/*.css', './src/*.html'], {read: false}), {\n    starttag: '\"{{ext}}\": [',\n    endtag: ']',\n    transform: function (filepath, file, i, length) {\n      return '  \"' + filepath + '\"' + (i + 1 < length ? ',' : '');\n    }\n  }))\n  .pipe(gulp.dest('./'));\n```\n\nInitial contents of `files.json`:\n\n```json\n{\n  \"js\": [\n  ],\n  \"css\": [\n  ],\n  \"html\": [\n  ]\n}\n```\n\n### Injecting with custom `transform` function with default fallback\n\nThe [default `transform`](#injecttransform) function is available to use e.g. as a default fallback.\n\nUsed here to inject Word documents as `<a>` tags below:\n\n**`index.html`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My documents</title>\n</head>\n<body>\n  <h1>Documents</h1>\n  <ul>\n    <!-- inject:docx -->\n    <!-- endinject -->\n  </ul>\n  <!-- inject:js -->\n  <!-- endinject -->\n</body>\n</html>\n```\n\n**`gulpfile.js`:**\n\n```javascript\nvar inject = require('gulp-inject');\n\ngulp.src('./index.html')\n  .pipe(inject(\n    gulp.src(['./*.js', './docs/*.docx'], {read: false}), {\n      transform: function (filepath) {\n        if (filepath.slice(-5) === '.docx') {\n          return '<li><a href=\"' + filepath + '\">' + filepath + '</a></li>';\n        }\n        // Use the default transform as fallback:\n        return inject.transform.apply(inject.transform, arguments);\n      }\n    }\n  ))\n  .pipe(gulp.dest('./'));\n```\n\n**Resulting `index.html`:**\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My documents</title>\n</head>\n<body>\n  <h1>Documents</h1>\n  <ul>\n    <!-- inject:docx -->\n    <li><a href=\"/docs/document1.docx\"></a></li>\n    <li><a href=\"/docs/document2.docx\"></a></li>\n    <!-- endinject -->\n  </ul>\n  <!-- inject:js -->\n  <script src=\"/lib1.js\"></script>\n  <script src=\"/lib2.js\"></script>\n  <!-- endinject -->\n</body>\n</html>\n```\n\n### Injecting dist files into bower.json's main section\n\n**Code:**\n\n```javascript\ngulp.src('./bower.json')\n  .pipe(inject(gulp.src(['./dist/app.min.js', './dist/app.min.css'], {read: false}), {\n    starttag: '\"main\": [',\n    endtag: ']',\n    transform: function (filepath, file, i, length) {\n      return '  \"' + filepath + '\"' + (i + 1 < length ? ',' : '');\n    }\n  }))\n  .pipe(gulp.dest('./'));\n```\n\n### Injecting all javascript files into a karma config file\n\n**Code:**\n\n```javascript\ngulp.src('./karma.conf.js')\n  .pipe(inject(gulp.src(['./src/**/*.js'], {read: false}), {\n    starttag: 'files: [',\n    endtag: ']',\n    transform: function (filepath, file, i, length) {\n      return '  \"' + filepath + '\"' + (i + 1 < length ? ',' : '');\n    }\n  }))\n  .pipe(gulp.dest('./'));\n```\n\n### Injecting files contents\n\nIn order to inject files contents you have to provide custom `transform` function, that will return file contents as string. You also have to omit `{read: false}` option of `gulp.src` in this case. Example below shows how to inject contents of html partials into head of `index.html`:\n\n***Code:***\n\n```javascript\ngulp.src('./src/index.html')\n  .pipe(inject(gulp.src(['./src/partials/head/*.html']), {\n    starttag: '<!-- inject:head:{{ext}} -->',\n    transform: function (filePath, file) {\n      // return file contents as string\n      return file.contents.toString('utf8')\n    }\n  }))\n  .pipe(gulp.dest('./dest'));\n```\n\nAnd in your `./src/index.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>My index</title>\n  <!-- inject:head:html -->\n  <!-- contents of html partials will be injected here -->\n  <!-- endinject -->\n</head>\n<body>\n</body>\n</html>\n```\n\n## API\n\n### inject(sources, options)\n\n#### sources\nType: `Stream`\n\nProvide a Vinyl File Stream as input to `inject`, see examples above.\n\n**N.B:** The old behavior, where you specify target as a string is deprecated since `v.1.0`.\n\n#### options.ignorePath\nType: `String` or `Array`\n\nDefault: `NULL`\n\n\nA path or paths that should be removed from each injected file path.\n\nThis could also be solved by setting the `cwd` option for your `gulp.src` streams, each source file's `cwd` is automatically removed from its path before injection (if not [`options.relative`](#optionsrelative) is set to `true`, see below).\n\n\n#### options.relative\nType: `Boolean`\n\nDefault: `false`\n\n\nIf set to `true` paths for the injected files will be relative to each target file, this also means that each source file's `cwd` is not necessary to remove from its path.\n\n\n#### options.addPrefix\nType: `String`\n\nDefault: `NULL`\n\n\nA path that should be prefixed to each injected file path.\n\n#### options.addRootSlash\nType: `Boolean`\n\nDefault: `![options.relative](#optionsrelative)`\n\n\nThe root slash is automatically added at the beginning of the path ('/'), or removed if set to `false`.\n\n#### options.name\nType: `String`\n\nDefault: `\"inject\"`\n\n\nUsed in the default [start](#optionsstarttag) and [end](#optionsendtag) tags below.\n\n\n#### options.starttag\n\n**Type:** `String`|`Function(targetExt, sourceExt)`\n\n**Params (if function):**\n  - `targetExt` - The file extension of the target file\n  - `sourceExt` - The file extension of source file\n\n**Purpose:**\n\nUsed to dynamically set starting placeholder tag depending on file extensions.\nIn the provided string, or the string returned from the given function, the string `{{ext}}` is replaced with the source file extension name, e.g. \"css\", \"js\" or \"html\". `{{name}}` will be replaced by [`option.name`](#optionname).\n\n##### Default:\n\nA function dependent on target file type and source file type that returns:\n\n* html as target: `<!-- {{name}}:{{ext}} -->`\n* jade as target: `//- {{name}}:{{ext}}`\n* jsx as target: `{/* {{name}}:{{ext}} */}`\n\n#### options.endtag\n\n**Type:** `String`|`Function(targetExt, sourceExt)`\n\n**Params (if function):**\n  - `targetExt` - The file extension of the target file\n  - `sourceExt` - The file extension of source file\n\n**Purpose:**\n\nUsed to dynamically set ending placeholder tag depending on file extensions.\nIn the provided string, or the string returned from the given function, the string `{{ext}}` is replaced with the source file extension name, e.g. \"css\", \"js\" or \"html\". `{{name}}` will be replaced by [`option.name`](#optionname).\n\n##### Default:\n\nA function dependent on target file type and source file type that returns:\n\n* html as target: `<!-- endinject -->`\n* jade as target: `//- endinject`\n* jsx as target: `{/* endinject */}`\n\n#### options.transform\n\n**Type**: `Function(filepath, file, index, length, targetFile)`\n\n**Params:**\n  - `filepath` - The \"unixified\" path to the file with any `ignorePath`'s removed and `addPrefix` added\n  - `file` - The [File object](https://github.com/wearefractal/vinyl) to inject given from `gulp.src`\n  - `index` - 0-based file index\n  - `length` - Total number of files to inject for the current file extension\n  - `targetFile` - The target [file](https://github.com/wearefractal/vinyl) to inject into\n\n**Purpose:**\n\nUsed to generate the content to inject for each file.\n\n##### Default:\n\n[A function](#injecttransform) dependent on target file type and source file type that returns:\n\n**Injecting into `html`**\n\n* css files: `<link rel=\"stylesheet\" href=\"<filename>.css\">`\n* js files: `<script src=\"<filename>.js\"></script>`\n* coffee files: `<script type=\"text/coffeescript\" src=\"<filename>.coffee\"></script>`\n* html files: `<link rel=\"import\" href=\"<filename>.html\">`\n* png files: `<img src=\"<filename>.png\">`\n* gif files: `<img src=\"<filename>.gif\">`\n* jpg files: `<img src=\"<filename>.jpg\">`\n* jpeg files: `<img src=\"<filename>.jpeg\">`\n\nIf `options.selfClosingTag` is `true` the default transformer above will make the `<link>` and `<img>` tags self close, i.e: `<link ... />` and `<img ... />` respectively.\n\n**Injecting into `jsx`**\n\nThe same as for injecting into `html` above with [`options.selfClosingTag`](#optionsselfclosingtag) set to `true`.\n\n**Injecting into `jade`**\n\n* css files: `link(rel=\"stylesheet\", href=\"<filename>.css\")`\n* js files: `script(src=\"<filename>.js\")`\n* coffee files: `script(type=\"text/coffeescript\", src=\"<filename>.coffee\")`\n* html files: `link(rel=\"import\", href=\"<filename>.html\")`\n* png files: `img(src=\"<filename>.png\")`\n* gif files: `img(src=\"<filename>.gif\")`\n* jpg files: `img(src=\"<filename>.jpg\")`\n* jpeg files: `img(src=\"<filename>.jpeg\")`\n\n#### options.selfClosingTag\nType: `Boolean`\n\nDefault: `false`\n\nAffects the default `options.transform` function, see above.\n\n\n#### ~~options.templateString~~\n\n***DEPRECATED!***\n\n*Deprecated since `v.1.0`. Use [`gulp-file`](https://www.npmjs.org/package/gulp-file) instead:*\n\n```javascript\nvar gulp = require('gulp');\nvar file = require('gulp-file');\nvar inject = require('gulp-inject');\n\nfile('index.html', '<html><head></head></html>')\n  .pipe(inject(gulp.src(['./src/app/**/*.js']), {\n    starttag: '<head>',\n    endtag: '</head>'\n  }))\n  .pipe(gulp.dest('./dest'));\n```\n\n#### ~~options.sort~~\n\n***DEPRECATED!***\n\n*Deprecated since `v.1.0`. Use [`sort-stream`](https://www.npmjs.org/package/sort-stream) instead:*\n\n```javascript\nvar gulp = require('gulp');\nvar sort = require('sort-stream');\nvar inject = require('gulp-inject');\n\ngulp.src('index.html')\n  .pipe(inject(gulp.src(['./src/app/**/*.js'])))\n  .pipe(sort(function (a, b) {\n    // Sort condition here...\n  }))\n  .pipe(gulp.dest('./dest'));\n```\n\n### inject.transform\n\nThe default transform function is exposed in the public API.\n\nFor more details see [the code with tests](https://github.com/klei/gulp-inject/tree/master/src/transform).\n\n#### inject.transform.html\n\nThe default transform function for files into `html`, or other file types not `jade` or `jsx`.\n\n#### inject.transform.jade\n\nThe default transform function for files into `jade`.\n\n#### inject.transform.jsx\n\nThe default transform function for files into `jsx`.\n\n\n## License\n\n[MIT License](http://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://npmjs.org/package/gulp-inject\n[npm-image]: https://badge.fury.io/js/gulp-inject.svg\n\n[travis-url]: http://travis-ci.org/klei/gulp-inject\n[travis-image]: https://secure.travis-ci.org/klei/gulp-inject.svg?branch=master\n\n[depstat-url]: https://david-dm.org/klei/gulp-inject\n[depstat-image]: https://david-dm.org/klei/gulp-inject.svg\n",
  "readmeFilename": "README.md",
  "_id": "gulp-inject@1.0.2",
  "_shasum": "f6bf3c62f25ccf30fbc91dc1c086e24b2e5619d6",
  "_from": "gulp-inject@^1.0.2",
  "_resolved": "https://registry.npmjs.org/gulp-inject/-/gulp-inject-1.0.2.tgz"
}
